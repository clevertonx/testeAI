/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Drink } from "./Drink";
import { DrinkCountArgs } from "./DrinkCountArgs";
import { DrinkFindManyArgs } from "./DrinkFindManyArgs";
import { DrinkFindUniqueArgs } from "./DrinkFindUniqueArgs";
import { CreateDrinkArgs } from "./CreateDrinkArgs";
import { UpdateDrinkArgs } from "./UpdateDrinkArgs";
import { DeleteDrinkArgs } from "./DeleteDrinkArgs";
import { Establishment } from "../../establishment/base/Establishment";
import { DrinkService } from "../drink.service";
@graphql.Resolver(() => Drink)
export class DrinkResolverBase {
  constructor(protected readonly service: DrinkService) {}

  async _drinksMeta(
    @graphql.Args() args: DrinkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Drink])
  async drinks(@graphql.Args() args: DrinkFindManyArgs): Promise<Drink[]> {
    return this.service.drinks(args);
  }

  @graphql.Query(() => Drink, { nullable: true })
  async drink(
    @graphql.Args() args: DrinkFindUniqueArgs
  ): Promise<Drink | null> {
    const result = await this.service.drink(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Drink)
  async createDrink(@graphql.Args() args: CreateDrinkArgs): Promise<Drink> {
    return await this.service.createDrink({
      ...args,
      data: {
        ...args.data,

        establishment: args.data.establishment
          ? {
              connect: args.data.establishment,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Drink)
  async updateDrink(
    @graphql.Args() args: UpdateDrinkArgs
  ): Promise<Drink | null> {
    try {
      return await this.service.updateDrink({
        ...args,
        data: {
          ...args.data,

          establishment: args.data.establishment
            ? {
                connect: args.data.establishment,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Drink)
  async deleteDrink(
    @graphql.Args() args: DeleteDrinkArgs
  ): Promise<Drink | null> {
    try {
      return await this.service.deleteDrink(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Establishment, {
    nullable: true,
    name: "establishment",
  })
  async getEstablishment(
    @graphql.Parent() parent: Drink
  ): Promise<Establishment | null> {
    const result = await this.service.getEstablishment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Query(() => String)
  async FilterByCategory(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.FilterByCategory(args);
  }

  @graphql.Query(() => String)
  async FilterByDistance(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.FilterByDistance(args);
  }

  @graphql.Query(() => String)
  async FilterByPrice(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.FilterByPrice(args);
  }
}
