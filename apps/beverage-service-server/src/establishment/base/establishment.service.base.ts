/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Establishment as PrismaEstablishment,
  Drink as PrismaDrink,
} from "@prisma/client";

export class EstablishmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EstablishmentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.establishment.count(args);
  }

  async establishments<T extends Prisma.EstablishmentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EstablishmentFindManyArgs>
  ): Promise<PrismaEstablishment[]> {
    return this.prisma.establishment.findMany<Prisma.EstablishmentFindManyArgs>(
      args
    );
  }
  async establishment<T extends Prisma.EstablishmentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EstablishmentFindUniqueArgs>
  ): Promise<PrismaEstablishment | null> {
    return this.prisma.establishment.findUnique(args);
  }
  async createEstablishment<T extends Prisma.EstablishmentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EstablishmentCreateArgs>
  ): Promise<PrismaEstablishment> {
    return this.prisma.establishment.create<T>(args);
  }
  async updateEstablishment<T extends Prisma.EstablishmentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EstablishmentUpdateArgs>
  ): Promise<PrismaEstablishment> {
    return this.prisma.establishment.update<T>(args);
  }
  async deleteEstablishment<T extends Prisma.EstablishmentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EstablishmentDeleteArgs>
  ): Promise<PrismaEstablishment> {
    return this.prisma.establishment.delete(args);
  }

  async findDrinks(
    parentId: string,
    args: Prisma.DrinkFindManyArgs
  ): Promise<PrismaDrink[]> {
    return this.prisma.establishment
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .drinks(args);
  }
}
