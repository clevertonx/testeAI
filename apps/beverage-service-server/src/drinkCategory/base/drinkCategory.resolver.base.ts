/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DrinkCategory } from "./DrinkCategory";
import { DrinkCategoryCountArgs } from "./DrinkCategoryCountArgs";
import { DrinkCategoryFindManyArgs } from "./DrinkCategoryFindManyArgs";
import { DrinkCategoryFindUniqueArgs } from "./DrinkCategoryFindUniqueArgs";
import { CreateDrinkCategoryArgs } from "./CreateDrinkCategoryArgs";
import { UpdateDrinkCategoryArgs } from "./UpdateDrinkCategoryArgs";
import { DeleteDrinkCategoryArgs } from "./DeleteDrinkCategoryArgs";
import { DrinkCategoryService } from "../drinkCategory.service";
@graphql.Resolver(() => DrinkCategory)
export class DrinkCategoryResolverBase {
  constructor(protected readonly service: DrinkCategoryService) {}

  async _drinkCategoriesMeta(
    @graphql.Args() args: DrinkCategoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DrinkCategory])
  async drinkCategories(
    @graphql.Args() args: DrinkCategoryFindManyArgs
  ): Promise<DrinkCategory[]> {
    return this.service.drinkCategories(args);
  }

  @graphql.Query(() => DrinkCategory, { nullable: true })
  async drinkCategory(
    @graphql.Args() args: DrinkCategoryFindUniqueArgs
  ): Promise<DrinkCategory | null> {
    const result = await this.service.drinkCategory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DrinkCategory)
  async createDrinkCategory(
    @graphql.Args() args: CreateDrinkCategoryArgs
  ): Promise<DrinkCategory> {
    return await this.service.createDrinkCategory({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DrinkCategory)
  async updateDrinkCategory(
    @graphql.Args() args: UpdateDrinkCategoryArgs
  ): Promise<DrinkCategory | null> {
    try {
      return await this.service.updateDrinkCategory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DrinkCategory)
  async deleteDrinkCategory(
    @graphql.Args() args: DeleteDrinkCategoryArgs
  ): Promise<DrinkCategory | null> {
    try {
      return await this.service.deleteDrinkCategory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
