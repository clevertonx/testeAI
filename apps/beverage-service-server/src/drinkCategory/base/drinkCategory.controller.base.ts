/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DrinkCategoryService } from "../drinkCategory.service";
import { DrinkCategoryCreateInput } from "./DrinkCategoryCreateInput";
import { DrinkCategory } from "./DrinkCategory";
import { DrinkCategoryFindManyArgs } from "./DrinkCategoryFindManyArgs";
import { DrinkCategoryWhereUniqueInput } from "./DrinkCategoryWhereUniqueInput";
import { DrinkCategoryUpdateInput } from "./DrinkCategoryUpdateInput";

export class DrinkCategoryControllerBase {
  constructor(protected readonly service: DrinkCategoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DrinkCategory })
  async createDrinkCategory(
    @common.Body() data: DrinkCategoryCreateInput
  ): Promise<DrinkCategory> {
    return await this.service.createDrinkCategory({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DrinkCategory] })
  @ApiNestedQuery(DrinkCategoryFindManyArgs)
  async drinkCategories(
    @common.Req() request: Request
  ): Promise<DrinkCategory[]> {
    const args = plainToClass(DrinkCategoryFindManyArgs, request.query);
    return this.service.drinkCategories({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DrinkCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async drinkCategory(
    @common.Param() params: DrinkCategoryWhereUniqueInput
  ): Promise<DrinkCategory | null> {
    const result = await this.service.drinkCategory({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DrinkCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDrinkCategory(
    @common.Param() params: DrinkCategoryWhereUniqueInput,
    @common.Body() data: DrinkCategoryUpdateInput
  ): Promise<DrinkCategory | null> {
    try {
      return await this.service.updateDrinkCategory({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DrinkCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDrinkCategory(
    @common.Param() params: DrinkCategoryWhereUniqueInput
  ): Promise<DrinkCategory | null> {
    try {
      return await this.service.deleteDrinkCategory({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
